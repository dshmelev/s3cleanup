#!/usr/bin/env ruby
require 'bundler/setup'
require 'tinybucket'
require 'aws-sdk'
require 'json'
require 'elasticsearch'

STDOUT.sync = true
repos = JSON.parse ENV['REPOS']
bucket = ENV['AWS_S3_BUCKET']

Tinybucket.configure do |config|
  config.oauth_token  = ENV['BITBUCKET_OAUTH_TOKEN']
  config.oauth_secret = ENV['BITBUCKET_OAUTH_SECRET']
end
s3 = Aws::S3::Client.new

Struct.new("Repo", :project, :owner, :slug)
repos.map! do |item|
  Struct::Repo.new *item.split('/')
end

save_hashes = []
bitbucket = Tinybucket.new
repos.each do |repo|
  puts "Parse: #{repo.owner}/#{repo.slug}"
  begin
    branches = bitbucket.repo(repo.owner, repo.slug).branches.collect
  rescue *[Tinybucket::Error::ServiceError, Tinybucket::Error::NotFound] => e
    puts e.message
    next
  end
  save_hashes += branches.map{ |b| "#{b.target['hash']}"}
end

# Parse ES
ES = Elasticsearch::Client.new(host: ENV.fetch('ELK_URL', 'http://localhost:9200'))
save_hashes += ES.search(index: 'capistrano', body: { query: { match: { stage: 'production' } } })['hits']['hits']
                 .first['_source']['apps']
                 .map { |_, v| v['current_revision'] }
                 .reject( &:nil? )

objects = []
last_key = nil
begin
  new = s3.list_objects(bucket: bucket, marker: last_key).contents
  objects += new
  last_key = new.last.key unless new.empty?
end while new.size > 0

puts 'Delete buckets:'
objects.select{|a| a.key.match( Regexp.union( repos.map(&:project) ) ) }
       .reject{|a| a.key.match( Regexp.union(save_hashes) ) }
       .each do |obj|
  puts obj.key
  s3.delete_object(bucket: bucket, key: obj.key)
end
